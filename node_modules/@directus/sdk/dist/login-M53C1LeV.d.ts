type AuthenticationMode = 'json' | 'cookie';
interface AuthenticationData {
    access_token: string | null;
    refresh_token: string | null;
    expires: number | null;
    expires_at: number | null;
}
interface AuthenticationStorage {
    get: () => Promise<AuthenticationData | null> | AuthenticationData | null;
    set: (value: AuthenticationData | null) => Promise<void> | void;
}
interface AuthenticationConfig {
    autoRefresh: boolean;
    msRefreshBeforeExpires: number;
    credentials?: RequestCredentials;
    storage?: AuthenticationStorage;
}
interface AuthenticationClient<_Schema extends object> {
    login(email: string, password: string, options?: LoginOptions): Promise<AuthenticationData>;
    refresh(): Promise<AuthenticationData>;
    logout(): Promise<void>;
    getToken(): Promise<string | null>;
    setToken(access_token: string | null): void;
}
interface StaticTokenClient<_Schema extends object> {
    getToken(): Promise<string | null>;
    setToken(access_token: string | null): void;
}

type HttpMethod = 'GET' | 'SEARCH' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
interface RequestOptions {
    path: string;
    method?: HttpMethod;
    params?: Record<string, any>;
    headers?: Record<string, string>;
    body?: string | FormData;
    onRequest?: RequestTransformer;
    onResponse?: ResponseTransformer;
}
type RequestTransformer = (options: RequestInit) => RequestInit | Promise<RequestInit>;
type ResponseTransformer<Output = any> = (data: any, request: RequestInit) => Output | Promise<Output>;

interface RestCommand<_Output extends object | unknown, _Schema extends object> {
    (): RequestOptions;
}
interface RestClient<Schema extends object> {
    request<Output>(options: RestCommand<Output, Schema>): Promise<Output>;
}
interface RestConfig {
    credentials?: RequestCredentials;
    onRequest?: RequestTransformer;
    onResponse?: ResponseTransformer;
}

interface LoginOptions {
    otp?: string;
    mode?: AuthenticationMode;
}
/**
 * Retrieve a temporary access token and refresh token.
 *
 * @param email Email address of the user you're retrieving the access token for.
 * @param password Password of the user.
 * @param options Optional login settings
 *
 * @returns The access and refresh tokens for the session
 */
declare const login: <Schema extends object>(email: string, password: string, options?: LoginOptions) => RestCommand<AuthenticationData, Schema>;

export { type AuthenticationMode as A, type HttpMethod as H, type LoginOptions as L, type RestCommand as R, type StaticTokenClient as S, type AuthenticationData as a, type AuthenticationStorage as b, type AuthenticationConfig as c, type AuthenticationClient as d, type RestClient as e, type RestConfig as f, type RequestOptions as g, type RequestTransformer as h, type ResponseTransformer as i, login as l };
